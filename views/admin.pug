include include/sauce-common

doctype
html(lang='en')
  head
    include include/head.pug

    title SAUCE Admin: tasks
  body
    +sauce-container('admin', user)
      .row
        .col-lg-10
          h1 SAUCE Admin
          p.text-muted SCCS Account and User Control Engine
          ul#navTab.nav.nav-tabs(role='tablist')
            mixin navTab(id, name, selected = false)
              li.nav-item(role='presentation')
                button.nav-link(
                  class={ active: selected },
                  id=`${id}Tab`,
                  data-bs-toggle='tab',
                  data-bs-target=`#${id}`,
                  type='button',
                  role='tab',
                  aria-controls=id,
                  aria-selected=selected
                )= name
            +navTab('tasks', 'Tasks', true)
            +navTab('accounts', 'Accounts')
          #tabContent.tab-content
            mixin tabPane(id, selected = false)
              .tab-pane.fade.border.border-top-0.rounded-bottom.p-3(
                class={ show: selected, active: selected },
                id=id,
                role='tabpanel',
                aria-labelledby=`${id}-tab`
              )
                block
            +tabPane('tasks', true)
              //- display alert for completed task
              if opTask && opStatus
                .alert.alert-dismissible.fade.show(
                  class={
                    'alert-success': opStatus === 'executed',
                    'alert-danger': opStatus === 'rejected',
                    'alert-warning': opStatus === 'failed',
                  },
                  role='alert'
                )
                  - const taskTruncated = opTask.substring(0, 6) + '...';
                  if opStatus === 'executed'
                    div Task #[code= taskTruncated] executed.
                  else if opStatus === 'rejected'
                    div Task #[code= taskTruncated] rejected.
                  else if opStatus === 'failed'
                    div Task #[code= taskTruncated] failed! Check the task data and server logs for error details.
                  button.btn-close(type='button', data-bs-dismiss='alert', aria-label='Close')
              .mb-2
                each status in ['pending', 'executed', 'rejected', 'failed']
                  .form-check.form-check-inline
                    - const checked = (!query && status === 'pending') || (query && (typeof query.status === 'string' ? query.status === status : status in query.status));
                    input.form-check-input(
                      id=`${status}Check`,
                      type='checkbox',
                      name='status',
                      value=status,
                      checked=checked
                    )
                    label.form-check-label(for=`${status}Check`)= status.charAt(0).toUpperCase() + status.slice(1)
              table#taskTable.table(width='100%', style='white-space: nowrap')
                thead
                  tr 
                    th(scope='col')
                    th(scope='col')
                    th(scope='col') Operation
                    th(scope='col') Created
                    th(scope='col') Status
                    th(scope='col') ID
                    th.none(scope='col') Data
              //- will be updated with the javascript
              p#lastUpdated.text-muted.mb-0
              .col
            +tabPane('accounts')
              table#userTable.table(width='100%', style='white-space: nowrap')
                thead
                  tr 
                    th(scope='col')
                    th(scope='col') Name
                    th(scope='col') Email
    //- modal
    #taskModal.modal.fade(tabindex='-1', aria-labelledby='taskModalTitle', aria-hidden='true')
      .modal-dialog 
        .modal-content 
          .modal-header
            h5#taskModalTitle.modal-title Modal Title
            button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
          .modal-body 
            p Operation: #[code#taskModalOperation]
            h5 Data
            .table-responsive 
              table.table
                thead
                  tr 
                    th(scope='col') Key
                    th(scope='col') Value
                tbody#taskModalData
          form#taskForm(action='/admin/', method='post')
            .modal-footer
              button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Close
              input#taskModalId(type='hidden', name='id')
              input#rejectInput(type='hidden', name='reject', value='true')
              button#taskRejectButton.btn.btn-danger(value='true') Reject
              button#taskApproveButton.btn.btn-success(value='false') Approve
              button#taskRetryButton.btn.btn-success(value='false') Retry
              script#buttonLoader(type='text/html')
                span.spinner-border.spinner-border-sm(role='status', aria-hidden='true')
                | &nbsp;Processing...
    //- defined here so I can access the rendery variables.
    script(type='text/javascript').
      const TASK_DATA_URL = '#{taskDataUrl}';
      const USER_DATA_URL = '#{userDataUrl}';
    if tab
      script(type='text/javascript').
        window.tabToJumpTo = '#{tab}';
    if taskData
      script(type='text/javascript').
        window.taskToJumpTo = JSON.parse('!{JSON.stringify(taskData)}');
    script(type='text/javascript', src='/dist/js/admin.js')
